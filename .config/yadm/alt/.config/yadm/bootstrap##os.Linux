#!/bin/sh

# Create Directory for Install Logs
if [ ! -d Install-Logs ]; then
    mkdir Install-Logs
fi

set -e

# Set some colors for output messages
OK="$(tput setaf 2)[OK]$(tput sgr0)"
ERROR="$(tput setaf 1)[ERROR]$(tput sgr0)"
NOTE="$(tput setaf 3)[NOTE]$(tput sgr0)"
WARN="$(tput setaf 166)[WARN]$(tput sgr0)"
CAT="$(tput setaf 6)[ACTION]$(tput sgr0)"
ORANGE=$(tput setaf 166)
YELLOW=$(tput setaf 3)
RESET=$(tput sgr0)

set -e

LOG="Install-Logs/install-$(date +%d-%H%M%S)_attempt.log"

# Install nvidia drivers
system_type=$(uname -s)

# Function for installing packages
install_package() {
  # Checking if package is already installed
  if sudo dnf list installed "$1" &>> /dev/null ; then
    echo -e "${OK} $1 is already installed. Skipping..."
  else
    # Package not installed
    echo -e "${NOTE} Installing $1 ..."
    sudo dnf install -y "$1" 2>&1 | tee -a "$LOG"
    # Making sure package is installed
    if sudo dnf list installed "$1" &>> /dev/null ; then
      echo -e "\e[1A\e[K${OK} $1 was installed."
    else
      # Something is missing, exiting to review log
      echo -e "\e[1A\e[K${ERROR} $1 failed to install :( , please check the install.log. You may need to install manually! Sorry I have tried :("
      exit 1
    fi
  fi
}

# Function for uninstalling packages
uninstall_package() {
  # Checking if package is installed
  if sudo dnf list installed "$1" &>> /dev/null ; then
    # Package is installed
    echo -e "${NOTE} Uninstalling $1 ..."
    sudo dnf remove -y "$1" 2>&1 | tee -a "$LOG"
    # Making sure package is uninstalled
    if ! sudo dnf list installed "$1" &>> /dev/null ; then
      echo -e "\e[1A\e[K${OK} $1 was uninstalled."
    else
      # Something went wrong, exiting to review log
      echo -e "\e[1A\e[K${ERROR} $1 failed to uninstall. Please check the uninstall.log."
      exit 1
    fi
  fi
}

if [[ "$system_type" = "Linux" ]]; then
	# ask for sudo upfront
	sudo -v
	echo "Installing nvidia drivers"
	# Install packages required for nvidia gpu (official drivers will be installed)
	sudo dnf install kernel-devel kernel-headers gcc make dkms acpid libglvnd-glx libglvnd-opengl libglvnd-devel pkgconfig
	# Nvidia drivers will be installed from the RPM Fusion repo
	sudo dnf install https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm
	sudo dnf install https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm
	# update repository cache
	sudo dnf makecache
	# Install drivers and cuda support
	sudo dnf install akmod-nvidia xorg-x11-drv-nvidia-cuda

	# Make sure to blacklist nouveau driver to use nvidia official driver.
	# Additional options to add to GRUB_CMDLINE_LINUX
	additional_options="rd.driver.blacklist=nouveau modprobe.blacklist=nouveau nvidia-drm.modeset=1"

	# Check if additional options are already present in GRUB_CMDLINE_LINUX
	if grep -q "GRUB_CMDLINE_LINUX.*$additional_options" /etc/default/grub; then
		echo "GRUB_CMDLINE_LINUX already contains the additional options" 2>&1 | tee -a "$LOG"
	else
		# Append the additional options to GRUB_CMDLINE_LINUX
		sudo sed -i "s/GRUB_CMDLINE_LINUX=\"/GRUB_CMDLINE_LINUX=\"$additional_options /" /etc/default/grub
		echo "Added the additional options to GRUB_CMDLINE_LINUX" 2>&1 | tee -a "$LOG"
	fi

	# Update GRUB configuration
	sudo grub2-mkconfig -o /boot/grub2/grub.cfg
else
	echo "Unable to install nvidia drivers."
	exit 1
fi


# Install hyprland wm
if [[ "$system_type" = "Linux" ]]; then
	# ask for sudo upfront
	sudo -v
  COPR_REPOS=(
  solopasha/hyprland
  en4aew/desktop-tools
  trs-sod/swaylock-effects
  alebastr/sway-extras
  erikreider/SwayNotificationCenter  
  )
	echo "Installing packages"
  # Enable COPR Repositories 
  for repo in "${COPR_REPOS[@]}";do 
    sudo dnf copr enable -y "$repo" 2>&1 | tee -a "$LOG" || { printf "%s - Failed to enable necessary copr repos\n" "${ERROR}"; exit 1; }
  done
  
  # Update package cache and install packages from COPR Repos
  sudo dnf update -y
  hypr_package=( 
    curl
    git
    grim
    gvfs
    gvfs-mtp
    ImageMagick
    jq
    kitty
    kvantum
    nano
    network-manager-applet
    openssl
    pamixer
    pavucontrol
    pipewire-alsa
    playerctl
    polkit-gnome
    python3-requests
    python3-pip
    qt5ct
    qt6ct
    qt6-qtsvg
    rofi-wayland
    slurp
    swappy
    swayidle
    SwayNotificationCenter
    waybar
    wget
    wl-clipboard
    wlogout
    xdg-user-dirs
    xdg-utils
    yad
  )
  
  # the following packages can be deleted. however, dotfiles may not work properly
  hypr_package_2=(
    brightnessctl
    btop
    cava
    eog
    gnome-system-monitor
    mousepad
    mpv
    mpv-mpris
    nvtop
    vim-enhanced
  )
  
  copr_packages=(
    cliphist
    pamixer
    swaylock-effects
    swww
  )
  
  # List of packages to uninstall as it conflicts with swaync or causing swaync to not function properly
  uninstall=(
    dunst
    mako
  )
  for PKG1 in "${hypr_package[@]}" "${hypr_package_2[@]}" "${copr_packages[@]}" "${Extra[@]}"; do
    install_package "$PKG1" 2>&1 | tee -a "$LOG"
    if [ $? -ne 0 ]; then
      echo -e "\e[1A\e[K${ERROR} - $PKG1 install had failed, please check the install.log"
      exit 1
    fi
  done
  
  # Install hyprland-git
  for NvHYPR in hyprland-git; do
    install_package "$NvHYPR" 2>&1 | tee -a "$LOG"
  done

# removing dunst and mako to avoid swaync conflict
printf "\n%s - Checking if mako or dunst are installed and removing for swaync to work properly \n" "${NOTE}"

for PKG in "${uninstall[@]}"; do
  uninstall_package "$PKG" 2>&1 | tee -a "$LOG"
  if [ $? -ne 0 ]; then
    echo -e "\e[1A\e[K${ERROR} - $PKG uninstallation had failed, please check the log"
    exit 1
  fi
done

## Installing pywal colors
printf "\n%s - Installing Pywal.... \n" "${NOTE}"

sudo pip3 install pywal 2>&1 | tee -a "$LOG"

else
	echo "Unable to install hyprland"
	exit 1
fi

# Install fonts
if [[ "$system_type" = "Linux" ]]; then
  fonts=(
  adobe-source-code-pro-fonts
  fira-code-fonts
  fontawesome-fonts-all
  google-droid-sans-fonts
  google-noto-sans-cjk-fonts
  google-noto-color-emoji-fonts
  google-noto-emoji-fonts
  jetbrains-mono-fonts
  )
  for PKG1 in "${fonts[@]}"; do
    install_package "$PKG1" 2>&1 | tee -a "$LOG"
    if [ $? -ne 0 ]; then
      echo -e "\e[1A\e[K${ERROR} - $PKG1 install had failed, please check the install.log"
      exit 1
    fi
  done
  
  # jetbrains nerd font.
  DOWNLOAD_URL="https://github.com/ryanoasis/nerd-fonts/releases/latest/download/JetBrainsMono.tar.xz"

  # Maximum number of download attempts
  MAX_ATTEMPTS=2
  for ((ATTEMPT = 1; ATTEMPT <= MAX_ATTEMPTS; ATTEMPT++)); do
      curl -OL "$DOWNLOAD_URL" 2>&1 | tee -a "$LOG" && break
      echo "Download attempt $ATTEMPT failed. Retrying in 2 seconds..." 2>&1 | tee -a "$LOG"
      sleep 2
  done
  
  # Check if the JetBrainsMono folder exists and delete it if it does
  if [ -d ~/.local/share/fonts/JetBrainsMonoNerd ]; then
      rm -rf ~/.local/share/fonts/JetBrainsMonoNerd 2>&1 | tee -a "$LOG"
  fi
  
  mkdir -p ~/.local/share/fonts/JetBrainsMonoNerd 2>&1 | tee -a "$LOG"
  # Extract the new files into the JetBrainsMono folder and log the output
  tar -xJkf JetBrainsMono.tar.xz -C ~/.local/share/fonts/JetBrainsMonoNerd 2>&1 | tee -a "$LOG"
  
  # Update font cache and log the output
  fc-cache -v 2>&1 | tee -a "$LOG"
  
  # clean up 
  if [ -d "JetBrainsMono.tar.xz" ]; then
  	rm -r JetBrainsMono.tar.xz 2>&1 | tee -a "$LOG"
  fi
fi

# Install gtk theme requirements
if [[ "$system_type" = "Linux" ]]; then
  engine=(
      unzip
      gtk-murrine-engine
  )
  # installing engine needed for gtk themes
  for PKG1 in "${engine[@]}"; do
      install_package "$PKG1" 2>&1 | tee -a "$LOG"
      if [ $? -ne 0 ]; then
          echo -e "\033[1A\033[K${ERROR} - $PKG1 install had failed, please check the install.log"
          exit 1
      fi
  done
  
  # Check if the directory exists and delete it if present
  if [ -d "GTK-themes-icons" ]; then
      echo "$NOTE Tokyo Theme GTK themes and Icons folder exist..deleting..." 2>&1 | tee -a "$LOG"
      rm -rf "GTK-themes-icons" 2>&1 | tee -a "$LOG"
  fi
  
  echo "$NOTE Cloning Tokyo Theme GTK themes and Icons repository..." 2>&1 | tee -a "$LOG"
  if git clone https://github.com/JaKooLit/GTK-themes-icons.git ; then
      cd GTK-themes-icons
      chmod +x auto-extract.sh
      ./auto-extract.sh
      cd ..
      echo "$OK Extracted GTK Themes & Icons to ~/.icons & ~/.themes folders" 2>&1 | tee -a "$LOG"
  else
      echo "$ERROR Download failed for Tokyo Theme GTK themes and Icons.." 2>&1 | tee -a "$LOG"
  fi
  
  tar -xf "assets/Bibata-Modern-Ice.tar.xz" -C ~/.icons 2>&1 | tee -a "$LOG"
  echo "$OK Extracted Bibata-Modern-Ice.tar.xz to ~/.icons folder." 2>&1 | tee -a "$LOG"
  
  clear
fi

# Setup Bluetooth (currently unavailable on desktop, coming soon maybe)
if [[ "$system_type" = "Linux" ]]; then
  blue=(
  bluez
  bluez-tools
  blueman
  python3-cairo
  )
  printf "${NOTE} Installing Bluetooth Packages...\n"
   for BLUE in "${blue[@]}"; do
     install_package "$BLUE" 2>&1 | tee -a "$LOG"
     [ $? -ne 0 ] && { echo -e "\e[1A\e[K${ERROR} - $BLUE install had failed, please check the install.log"; exit 1; }
    done
  
  printf " Activating Bluetooth Services...\n"
  sudo systemctl enable --now bluetooth.service 2>&1 | tee -a "$LOG"
fi

# Install Thunar
if [[ "$system_type" = "Linux" ]]; then
  thunar=(
  ffmpegthumbnailer
  Thunar 
  thunar-volman 
  tumbler 
  thunar-archive-plugin
  file-roller
  )
  printf "${NOTE} Installing Thunar Packages...\n"  
    for THUNAR in "${thunar[@]}"; do
      install_package "$THUNAR" 2>&1 | tee -a "$LOG"
      [ $? -ne 0 ] && { echo -e "\e[1A\e[K${ERROR} - $THUNAR install had failed, please check the install.log"; exit 1; }
    done
  
   # Check for existing configs and copy if does not exist
  for DIR1 in Thunar xfce4; do
    DIRPATH=~/.config/$DIR1
    if [ -d "$DIRPATH" ]; then
      echo -e "${NOTE} Config for $DIR1 found, no need to copy." 2>&1 | tee -a "$LOG"
    else
      echo -e "${NOTE} Config for $DIR1 not found, copying from assets." 2>&1 | tee -a "$LOG"
      cp -r assets/$DIR1 ~/.config/ && echo "Copy $DIR1 completed!" || echo "Error: Failed to copy $DIR1 config files." 2>&1 | tee -a "$LOG"
    fi
  done
fi

# xdph
if [[ "$system_type" = "Linux" ]]; then
  xdg=(
  xdg-desktop-portal-hyprland
  xdg-desktop-portal-gtk
  )

  # XDG-DESKTOP-PORTAL-HYPRLAND
  for xdgs in "${xdg[@]}"; do
    install_package "$xdgs" 2>&1 | tee -a "$LOG"
      if [ $? -ne 0 ]; then
      echo -e "\e[1A\e[K${ERROR} - $xdph install had failed, please check the install.log"
      exit 1
      fi
  done
  
  printf "\n"
  
  printf "${NOTE} Checking for other XDG-Desktop-Portal-Implementations....\n"
  sleep 1
  printf "\n"
  printf "${NOTE} XDG-desktop-portal-KDE & GNOME (if installed) should be manually disabled or removed! I can't remove it... sorry...\n"
  while true; do
      read -rp "${CAT} Would you like to try to remove other XDG-Desktop-Portal-Implementations? (y/n) " XDPH1
      echo
      sleep 1
  
      case $XDPH1 in
          [Yy])
              # Clean out other portals
              printf "${NOTE} Clearing any other xdg-desktop-portal implementations...\n"
              # Check if packages are installed and uninstall if present
    			if sudo dnf list installed xdg-desktop-portal-wlr &>> /dev/null; then
      		echo "Removing xdg-desktop-portal-wlr..."
      		sudo dnf remove -y xdg-desktop-portal-wlr 2>&1 | tee -a "$LOG"
    			fi
  
    			if sudo dnf list installed xdg-desktop-portal-lxqt &>> /dev/null; then
      		echo "Removing xdg-desktop-portal-lxqt..."
      		sudo dnf remove -y xdg-desktop-portal-lxqt 2>&1 | tee -a "$LOG"
    			fi
  
              break
              ;;
          [Nn])
              echo "no other XDG-implementations will be removed." >> "$LOG"
              break
              ;;
          *)
              echo "Invalid input. Please enter 'y' for yes or 'n' for no."
              ;;
      esac
  done
fi

# Install nwg-look
if [[ "$system_type" = "Linux" ]]; then
  nwg_look=(
  golang
  gtk3
  gtk3-devel
  cairo-devel
  glib-devel
  )

  MLOG="install-$(date +%d-%H%M%S)_nwg-look2.log"
  
  # Installing NWG-Look Dependencies
  for PKG1 in "${nwg_look[@]}"; do
    install_package "$PKG1" 2>&1 | tee -a "$LOG"
    if [ $? -ne 0 ]; then
      echo -e "\033[1A\033[K${ERROR} - $PKG1 install had failed, please check the install.log"
      exit 1
    fi
  done
  
  printf "${NOTE} Installing nwg-look\n"
  # Check if nwg-look directory exists
  if [ -d "nwg-look" ]; then
    printf "${INFO} nwg-look directory already exists. Updating...\n"
    cd nwg-look || exit 1
    git stash
    git pull
  else
    # Clone nwg-look repository if directory doesn't exist
    if git clone https://github.com/nwg-piotr/nwg-look.git; then
      cd nwg-look || exit 1
    else
      echo -e "${ERROR} Download failed for nwg-look." 2>&1 | tee -a "$LOG"
      mv "$MLOG" ../Install-Logs/ || true
      exit 1
    fi
  fi
  
  # Build nwg-look
  make build
  if sudo make install 2>&1 | tee -a "$MLOG"; then
    printf "${OK} nwg-look installed successfully.\n" 2>&1 | tee -a "$MLOG"
  else
    echo -e "${ERROR} Installation failed for nwg-look" 2>&1 | tee -a "$MLOG"
  fi
  
  # Move logs to Install-Logs directory
  mv "$MLOG" ../Install-Logs/ || true
  cd ..

fi

# Add user to input group
if [[ "$system_type" = "Linux" ]]; then
  while true; do
      echo "${WARN} This script will add your user to the 'input' group."
      echo "${NOTE} Please note that adding yourself to the 'input' group might be necessary for waybar keyboard-state functionality."
  
      read -p "${YELLOW}Do you want to proceed? (y/n): ${RESET}" choice
  
      if [[ $choice == "y" || $choice == "Y" ]]; then
          # Check if the 'input' group exists
          if grep -q '^input:' /etc/group; then
              echo "${OK} 'input' group exists."
          else
              echo "${NOTE} 'input' group doesn't exist. Creating 'input' group..."
              sudo groupadd input
  
              # Log the creation of the 'input' group
              echo "'input' group created" >> "$LOG"
          fi
  
          # Add the user to the input group
          sudo usermod -aG input "$(whoami)"
          echo "${OK} User added to the 'input' group. Changes will take effect after you log out and log back in."
  
          # Log the addition of the user to the 'input' group
          echo "User added to 'input' group" >> "$LOG"
          break  # Break out of the loop if 'yes' is chosen
      elif [[ $choice == "n" || $choice == "N" ]]; then
          echo "${NOTE} No changes made. Exiting the script."
          break  # Break out of the loop if 'no' is chosen
      else
          echo "${ERROR} Invalid choice. Please enter 'y' for yes or 'n' for no."
      fi
  done
fi

# Install fish shell
if [[ "$system_type" = "Linux" ]]; then
	# ask for sudo upfront
	sudo -v
	# Install packages required for nvidia gpu (official drivers will be installed)
	echo "Installing fish shell"
	sudo dnf install fish
fi

# Set fish as the shell
if [ $SHELL != "/usr/bin/fish" ]; then
	shell_path="$(command -v fish)"
	echo "Changing your shell to fish"
	sudo sh -c "echo $shell_path >> /etc/shells"
	chsh -s $shell_path
else
	echo "shell is already fish"
fi

# Install all other packages
if [[ "$system_type" = "Linux" ]]; then
  packages=(
    neovim
    fzf
    direnv
    pandoc
    git-delta
    lazygit
    emacs
    1password
  )


  sudo dnf copr enable -y atim/lazygit | tee -a "$LOG" || { printf "%s - Failed to enable necessary copr repos\n" "${ERROR}"; exit 1; }

  for package in "${packages[@]}"; do
    install_package "$package" 2>&1 | tee -a "$LOG"
      if [ $? -ne 0 ]; then
      echo -e "\e[1A\e[K${ERROR} - $package install had failed, please check the install.log"
      exit 1
      fi
  done
fi

# Install tmux plugin manager
if [ -d "$HOME/.tmux/plugins/tpm" ]; then
	echo "tpm already exist"
else
	git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
fi

# Make sure asdf exist

if [ -d "$HOME/.asdf" ]; then
	echo "asdf already installed"
else
	git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.14.0
fi

# Install Rustup & Install Rust
if [[ -x $(command -v rustup) ]]; then
	# Rustup is already installed, check for updates.
	echo "Rustup is already installed"
	rustup update
else
	# Rustup will be installed.
	/bin/bash -c "(curl https://sh.rustup.rs -sSf | sh -s -- -y --profile default --default-toolchain nightly)"
	source $HOME/.cargo/env
fi

# Oxidize my terminal tools
if [[ -x $(command -v cargo) ]]; then
	# Install favorite rust tools through cargo. First install binstall, then install tools through binstall
	cargo install cargo-binstall
	cargo binstall --no-confirm fd-find eza bat zoxide starship nu rm-improved mise coreutils du-dust zellij mprocs ripgrep gitui bob-nvim eza efmt bottom
else
	# Rustup will be installed.
	echo "Error, we've somehow reached this point without cargo installed?"
	exit 1
fi

echo "Done. Note that some of these changes require a logout/restart to take effect."
